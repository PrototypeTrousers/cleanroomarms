# Gradle Properties
org.gradle.jvmargs = -Xmx3G -XX:+UnlockExperimentalVMOptions -XX:+UseCompactObjectHeaders

# Source Options
# Use Modern Java(9+) Syntax (Courtesy of Jabel)
use_modern_java_syntax = false

# Compilation Options
generate_sources_jar = true
generate_javadocs_jar = false

# Testing
enable_junit_testing = true
show_testing_output = false

# Mod Information
# HIGHLY RECOMMEND complying with SemVer for mod_version: https://semver.org/
mod_version = 1.0.0
root_package = proto.mechanicalarms
mod_id = mechanicalarms
mod_name = MechanicalArms

# Mod Metadata (Optional)
mod_description = Me
mod_url = no
mod_update_json = no
# Delimit authors with commas
mod_authors = Proto
mod_credits = Proto
mod_logo_path =

# Mapping Properties
use_dependency_at_files = true

# Run Configurations
# If multiple arguments/tweak classes are stated, use spaces as the delimiter
minecraft_username = Developer
extra_jvm_args = -Xmx3G -XX:+UnlockExperimentalVMOptions -XX:+UseCompactObjectHeaders
extra_tweak_classes =

# Maven Publishing (Provide secret: MAVEN_USER, MAVEN_PASS)
publish_to_maven = false
# Good for debugging artifacts before uploading to remote maven
# GitHub actions won't run if this is true, test this by running the task `publishToMavenLocal`
publish_to_local_maven = false
maven_name = ${mod_name}
maven_url =

# Publishing
# release_type can only be: release, beta or alpha (applies to CurseForge / Modrinth)
release_type = release
publish_with_changelog = ${{ it.file('CHANGELOG.md').exists() }}

# If any properties changes below this line, refresh gradle again to ensure everything is working correctly.

# Access Transformers
# A way to change visibility of Minecraft's classes, methods and fields
# An example access transformer file is given in the path: `src/main/resources/example_at.cfg`
# AT files should be in the root of src/main/resources with the filename formatted as: `mod_id_at.cfg`
# Use the property `access_transformer_locations` to state custom AT files if you aren't using the default `mod_id_at.cfg` location
# If multiple locations are stated, use spaces as the delimiter
use_access_transformer = true
access_transformer_locations = ${mod_id}_at.cfg

# Coremods
# The most powerful way to change java classes at runtime, it is however very primitive with little documentation.
# Only make a coremod if you are absolutely sure of what you are doing
# Change the property `coremod_includes_mod` to false if your coremod doesn't have a @Mod annotation
# You MUST state a class name for `coremod_plugin_class_name` if you are making a coremod, the class should implement `IFMLLoadingPlugin`
is_coremod = true
coremod_includes_mod = true
coremod_plugin_class_name = proto.mechanicalarms.ArmsCore

# AssetMover
# Convenient way to allow downloading of assets from official vanilla Minecraft servers, CurseForge, or any direct links
# Documentation: https://github.com/CleanroomMC/AssetMover
use_asset_mover = false
asset_mover_version = 2.5