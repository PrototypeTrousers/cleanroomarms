buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.outlands.top/releases' }
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'com.cleanroommc', name: 'CleanroomGradle', version: '0.0.1+', changing: true
        classpath "net.kyori:blossom:2.1.0"
        classpath 'com.gradleup.shadow:shadow-gradle-plugin:8.3.3'
    }
}
apply plugin: 'java'
apply plugin: 'com.cleanroommc.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'net.kyori.blossom'
apply plugin: 'com.gradleup.shadow'

//reobf {
//    shadowJar {}
//}

//jar.finalizedBy(reobfShadowJar)
//jar.finalizedBy('reobfJar')


tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    configurations = [project.configurations.shadow]
    minimize()
}


version = "${minecraft_version}-${mod_version}"
group = mod_base_package
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
    main {
        java {
            srcDir addCleanroomMinecraftSources
        }
        resources {
            srcDir 'src/generated/resources'
        }
        blossom {
            resources {
                property("mod_id", mod_id)
                property("mod_name", mod_name)
                property("mod_description", mod_description)
                property("mod_version", mod_version)
                property("mod_authors", mod_authors)
            }
            javaSources {
                property("MODNAME", mod_name)
                property("MODID", mod_id)
                property("VERSION", version)
                property("CLEANROOM_VERSION", cleanroom_version)
            }
        }
    }
}

//mixin {add sourceSets.main, mod_id + ".mixins.refmap.json"}
repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    maven {
        url "https://repo.cleanroommc.com/snapshots"
    }
    maven {
        url "https://maven.outlands.top/releases/"
    }
    maven {
        name = "cursemaven"
        url = "https://www.cursemaven.com"
    }

    mavenCentral()
}

dependencies {
    implementation "com.cleanroommc:cleanroom:${cleanroom_version}"

    shadow("de.javagl:jgltf-model:2.0.4")
    shadow("org.joml:joml:1.10.8")
    implementation("de.javagl:jgltf-model:2.0.4")
    implementation("org.joml:joml:1.10.8")

    annotationProcessor 'org.ow2.asm:asm:9.6'
    annotationProcessor 'com.google.guava:guava:33.0.0-jre'
    annotationProcessor 'com.google.code.gson:gson:2.10.1'

    annotationProcessor('com.cleanroommc:sponge-mixin:0.20.7+mixin.0.8.7')

    //also add the mod jar to the run mod folder...
    compileOnly('curse.maven:modularui-624243:5153414-sources-5153415')
    //implementation fg.deobf("curse.maven:plonk-345779:4480769")
  //  implementation deobf("curse.maven:effortlessbuilding-302113:2847346")

//    implementation fg.deobf("curse.maven:ie-231951:2974106")
//    implementation fg.deobf("curse.maven:avaritia-261348:3143349")
 //   implementation fg.deobf("curse.maven:CodeChicken-242818:2779848")
    implementation "curse.maven:Fugue-1005815:5977040"
    implementation "curse.maven:littletiles-257818:5180387"
    implementation "curse.maven:creativecore-257814:4722163"
//    implementation "curse.maven:AR-236542:4671856"
//    implementation "curse.maven:libVulpes-236541:3801015"
//    implementation "curse.maven:Galacticraft-564236:4671122"
}

configurations.configureEach {
    exclude group:'net.minecraft', module:'client'
    exclude group:'net.minecraft', module:'mappings_stable'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': mod_authors,
                'Specification-Version': '1', // We are version 1 of ourselves
                'FMLCorePluginContainsFMLMod': true,
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePlugin': 'proto.mechanicalarms.ArmsCore',
                'ForceLoadAsMod': true,
                'FMLAT': 'arm_at.cfg',
                'Implementation-Title': project.name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

task copyDependenciesToLocalMaven {
    group = "Custom Tasks"
    description = "Copies downloaded dependencies and their transitive dependencies from both runtimeClasspath and compileClasspath to the local Maven repository."

    doLast {
        def localMavenRepo = new File(System.getProperty('user.home'), '.m2/repository')

        // Helper method to copy artifacts
        def copyArtifacts = { configuration ->
            configuration.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                def groupPath = artifact.moduleVersion.id.group.replace('.', '/')
                def artifactId = artifact.name
                def version = artifact.moduleVersion.id.version
                def destDir = new File(localMavenRepo, "$groupPath/$artifactId/$version")

                destDir.mkdirs()

                def destFile = new File(destDir, "${artifactId}-${version}.${artifact.extension}")
                if (!destFile.exists()) {
                    copy {
                        from artifact.file
                        into destDir
                        rename { "${artifactId}-${version}.${artifact.extension}" }
                    }
                    println "Copied: $artifactId-$version to $destDir"
                } else {
                    println "Already exists: $artifactId-$version in $destDir"
                }
            }
        }

        // Process both runtimeClasspath and compileClasspath
        copyArtifacts(configurations.runtimeClasspath)
        copyArtifacts(configurations.compileClasspath)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
